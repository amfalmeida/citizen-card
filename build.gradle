
defaultTasks = ["clean", "build", "jar", "copyToLib", "makePackage"]

buildscript {
    repositories {
        mavenCentral()
        maven {
		    url "http://dl.bintray.com/vermeulen-mp/gradle-plugins"
		}
    }
    dependencies {
         classpath "com.wiredforcode:gradle-heroku-plugin:1.0.0"
         classpath "edu.sc.seis.gradle:launch4j:1.0.6"
    }
}

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

configurations {
	runtimeOnly
}

apply plugin: "eclipse-wtp"
apply plugin: 'launch4j'

version = "1.0"

ext {
	launch4j = "C:/Personal/Software/launch4j"
    mainClassName = "com.aalmeida.EmbeddedHTTPServer"
}

repositories {
	mavenLocal()
    mavenCentral()
}

dependencies {	
	compile files('libs/pteidlibj.jar')
	
	compile 'org.eclipse.jetty:jetty-server:+'
    compile 'org.eclipse.jetty:jetty-servlet:+'
    compile 'org.eclipse.jetty.websocket:websocket-client:+'
    compile 'org.eclipse.jetty.websocket:javax-websocket-server-impl:+'

	compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.18'
	
	compile "com.fasterxml:jackson-module-json-org:0.9.1"
	
	compile "javax.websocket:javax.websocket-api:1.1"
	
	compile "org.glassfish.jersey.core:jersey-server:2.18"
	compile "org.glassfish.jersey.containers:jersey-container-jdk-http:2.18"
	
	compile "com.github.jai-imageio:jai-imageio-jpeg2000:1.3.0"
}

jar.doFirst{
      manifest {
            attributes("Manifest-Version": "1.0",
        		//"Created-By": vendor,
                //"Specification-Title": appName,
                "Specification-Version": project.version,
                //"Specification-Vendor": vendor,
                //"Implementation-Title": appName,
                "Implementation-Version": project.version,
                //"Implementation-Vendor": vendor,
                "Main-Class": project.mainClassName,
                "Class-Path": configurations.compile.collect { 'lib/' + it.getName() }.join(' ')           
            )
      }
}

task copyToLib(type: Copy) {
    into "$buildDir/executable/lib"
    from configurations.runtime
}

task makePackage(dependsOn: ["jar"]) << {
    if (!project.hasProperty("launch4j")) {
        throw new RuntimeException("Specify launch4j directory")
    }
    def userDir = System.getProperty("user.dir");
    def launch4jDir = new File(project.launch4j)
	def launch4jConfig = new File(userDir, "citizen-card.xml").absolutePath
    
    println launch4jDir.absolutePath
    println launch4jConfig

    def p = "createexe.bat ${userDir} ${launch4jDir.absolutePath} ${launch4jConfig}".execute()
    p.waitForProcessOutput(System.out, System.err)
    println p.exitValue()
    if (p.exitValue()) {
		throw new RuntimeException("launch4j failed")
	}
}
